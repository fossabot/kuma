// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package kumacni

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 4, 13, 11, 52, 3, 567556211, time.UTC),
		},
		"/all-in-one-template.yaml": &vfsgen۰CompressedFileInfo{
			name:             "all-in-one-template.yaml",
			modTime:          time.Date(2020, 4, 13, 11, 52, 3, 566721720, time.UTC),
			uncompressedSize: 3746,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6f\xdb\x38\x13\xbe\xfb\x57\x0c\xdc\x43\x2f\x91\xf5\x16\x2f\x16\x28\xb4\x87\x45\xea\xa4\xa9\x91\xc6\x0d\x92\x66\xf7\x50\x14\xc2\x98\x1c\x5b\x5c\x53\x1c\x82\xa4\x9c\xb8\xbb\xfb\xdf\x17\xd4\x87\x23\xf9\x23\x2d\xba\x3a\xd8\x90\x38\xf3\xcc\xc3\x99\xe1\xc3\x49\x92\x64\x84\x56\xfd\x4e\xce\x2b\x36\x19\x6c\xde\x8c\xd6\xca\xc8\x0c\xee\xc9\x6d\x94\xa0\x73\x21\xb8\x32\x61\x54\x52\x40\x89\x01\xb3\x11\x80\xc1\x92\x32\x58\x57\x25\x26\xc2\xa8\xf6\x83\xb7\x28\xea\xaf\x0b\x4a\xfc\xd6\x07\x2a\x47\x00\x1a\x17\xa4\x7d\xf4\x01\x40\x6b\x7b\x4e\x31\x6e\x13\x68\xca\x66\xa9\x56\x37\x68\xf7\x79\x9c\x0e\x99\x88\xda\xe7\xe7\x22\x77\x90\xaf\xe0\x73\x41\x30\x9d\xcf\xc0\x50\x78\x64\xb7\x86\x06\xb5\x72\x18\x14\x1b\x08\x0c\x28\x65\xfc\x0b\x05\x81\xd5\xd5\x4a\x19\x10\x05\x2a\x03\x6c\x80\x50\x14\x60\x58\xd2\x04\x6a\x1c\x6f\x49\x28\xd4\x35\xee\x06\x75\x45\x1e\x94\x81\x50\x28\xdf\xc2\xc2\xa3\xd2\x1a\x16\x04\x58\x05\x2e\x31\x28\x81\x5a\x6f\xc1\xb2\xad\x34\x06\x92\x93\x11\x80\x30\x2a\x6f\xc9\xe4\x8d\x57\x06\x7f\x27\xf5\x1e\xfe\xaa\x7f\x01\xc6\xc2\x74\x49\x1a\x67\x30\xfe\xdf\xe4\xff\x93\x37\xe3\xb3\x6e\x31\xa6\x23\x7e\xee\x36\xfb\xbc\x12\xb6\xf6\xc4\x8a\xe6\x55\xae\x69\x43\x3a\x2e\x2b\xb3\xe4\xe7\xa5\x98\x52\x67\x28\x90\x1f\x67\x3b\x06\xbb\x95\x86\x61\xf4\xca\xf3\xeb\x87\x77\x97\xd3\x4f\xf3\xf7\xb3\xab\xfc\xfd\xec\xe3\xe5\xed\xf9\xe7\x0f\x79\xbe\x03\xea\x88\xe7\x0b\x65\x72\xa9\x5c\xf4\x49\x37\xe8\x52\xad\x16\xa9\x30\x2a\x5d\x28\x33\x34\xa6\x27\xa1\x2b\x49\xf9\xae\xbe\x91\xc1\x97\x26\x6e\x5b\xe4\x31\x7c\x6d\x3d\xfe\x19\x35\xbf\xfb\xbd\xec\x16\x28\x26\x58\x85\x82\x9d\xfa\x56\x17\x75\xb2\x7e\xeb\x27\x8a\xd3\x5d\x97\x4f\x75\xe5\x03\xb9\x3b\xd6\xf4\x72\x8b\x9f\xee\x27\x57\x69\xaa\x17\x12\x40\xab\xae\x1c\x57\xd6\x67\xf0\x65\x3c\x6e\xe8\x39\xf2\x5c\x39\x41\xad\x6f\x34\xb3\x2c\xfd\xee\x25\xf6\x50\xf3\xb6\x21\xb7\xe8\x59\xad\x28\xfc\xc7\x1d\xbd\x53\x46\x2a\xb3\xfa\xe9\x8d\xb1\xa6\x3b\x5a\xc6\xa5\x6e\x63\x2f\x30\x18\x01\x1c\xa6\xf4\x20\x9e\xaf\x16\x7f\x92\x08\x6d\xbe\x8e\x2a\x4d\x24\x72\xc0\xf2\xe4\x49\x7f\xd6\x91\x0b\xa4\x92\xcd\x3d\x85\x41\xc6\xd0\x5a\x9f\xbe\x2c\x26\xb1\x02\x3f\x2a\x25\xeb\xb7\x3e\x19\x64\xa9\xf1\x8e\xa7\x3f\x1a\x78\xd2\x24\x02\xbb\xc6\xb8\xc4\x20\x8a\x8f\x3d\xef\x93\xfe\x00\x95\x95\x18\xe8\x3e\x38\x0c\xb4\xda\x36\xe6\xf1\xcc\x66\x70\xc7\x5a\x2b\xb3\x7a\xa8\x0d\x9a\x96\xea\x7f\xe9\x90\x4b\x7c\x7a\x30\xb8\x41\xa5\x71\xa1\x29\x83\x37\x23\x80\x40\xa5\xd5\x3b\x9b\x7e\x0a\xe2\xa3\x07\xcc\x5e\xe0\x56\xb7\x86\x31\x1c\xea\x7a\xf7\x3c\xa2\x84\x2a\x7f\x06\xa8\xd9\x44\x81\x0b\x45\xad\x95\x53\xa7\x6a\x79\x3b\x97\x92\x8d\xff\x64\xf4\x16\x02\x6b\x6a\x75\x75\x41\x9a\x1f\xcf\x7a\x18\x25\xba\xb5\x6f\x44\x96\x25\xa0\x07\x04\xd1\x22\x44\x05\x4e\xd8\x9c\x01\x19\x5f\x39\x65\x56\xa0\x42\x3c\x18\xbe\xe7\x6e\x9d\x62\xa7\xc2\x16\xbc\x28\x48\x56\x31\x33\x80\x46\x42\x28\x30\x80\x0a\xfe\xf9\x04\x02\x3a\x8a\x6f\xe4\x36\x24\x7b\x08\x6a\x19\x61\x69\x43\xae\xc6\x06\xda\x28\xd1\x2a\x72\xf3\xb4\xc8\xe4\x26\xa8\x6d\x81\x93\x67\x5d\x8c\x47\xaf\x23\x9b\x58\x96\x19\xbc\x7e\x5d\xbb\x75\x1d\x51\xb7\x2e\x4b\xba\x1f\x74\x46\x7c\x16\x14\xf6\x91\xd8\x67\xa0\x95\xa9\x9e\x5a\xa3\x82\x7d\x98\x37\xf7\x41\x06\xc1\x55\x5d\x31\x9e\xb3\x39\x28\xc6\x0d\xae\x09\x7c\xe5\x68\x58\xc1\x66\x53\xdd\x1e\x64\xbc\xbd\x50\xeb\x46\x78\x9e\xf7\x98\x00\x2d\x97\x24\x42\x06\x73\xbe\x6f\x6d\x7b\x8a\xcc\x36\x46\x64\x97\xc1\xe5\x93\xf2\x83\x02\xdc\xa0\x5b\xbf\x58\x3e\x58\xb2\x8b\x79\xdf\xd5\xa7\x1f\x75\x4d\xdb\xec\x48\xc7\xfc\x48\xe8\x3e\xe5\xcb\x27\x12\x55\xf8\x01\xc6\x5d\xbb\x4c\x35\x7a\x3f\xaf\x95\xa0\x39\xe9\x89\x68\x84\x2b\xe9\xd8\xb7\x0e\x7e\x20\x4f\xf3\x43\x65\xaa\x73\xa0\x8c\x2a\xd5\x37\x02\xc9\x8f\x26\xa8\x92\x40\x36\xfd\x8a\xdd\x69\x85\xca\xae\x1c\x4a\x02\x76\x20\x49\x53\xac\xde\xaf\x10\x48\x6b\xb8\xde\x35\x41\x9c\x36\x24\x03\xc2\x78\xc9\x4e\xd0\x0e\xbe\x73\x18\x67\x50\x84\x60\x7d\x96\xa6\xc3\xce\x91\x2c\x7c\x2a\xd8\x08\xb2\xc1\xa7\xb1\x61\x34\xa3\xf4\x69\xbc\x6a\xe2\x4f\xfa\x2a\x90\x2b\x95\xa9\x9b\x26\xe1\x65\xec\xd5\x5d\xf1\x7b\x4b\x57\x0e\x05\xdd\x92\x53\x2c\xef\xe3\x05\x2f\x7d\x06\xbf\xb4\x66\x82\x4d\x40\x65\xc8\xf5\x9a\x2e\x69\xc5\x54\x19\x1f\x50\xeb\x5e\x4e\xe2\xa3\x4a\x5c\x51\x16\x47\x8c\xc5\x9a\x37\x4a\x6f\x31\xed\x19\x66\xbb\x59\x64\xdf\xe5\xb6\xd2\xfa\x96\xb5\x12\xdb\x0c\xce\xf5\x23\x6e\x7d\xcf\x42\x70\x59\x62\x14\xfc\x2f\xe3\x3e\xda\xc4\x17\xe3\xaf\x3d\x33\x32\x9b\xac\xf7\x1a\xb3\x18\x6b\x07\xbc\x6c\x34\x6a\x3e\xeb\x06\xb3\xa5\xd2\x14\x13\x2f\x1c\x61\xa0\xc9\xc0\xa9\xdb\xdf\x74\x3e\xcb\xe3\x7c\x93\xcf\xcf\x6f\x2e\x07\x16\xd0\x8c\x7b\xbd\xd1\x6a\x12\x71\xc7\x7b\xb1\x8f\xcf\x9a\x31\x6c\xbb\x87\xe1\x50\x79\x92\xc4\xfc\xf2\xf3\x1f\x9f\xee\xae\xf3\x66\xd8\x3a\xc6\xe4\xbd\xe3\x32\xdb\x5b\x80\x36\xde\x0d\xda\x6b\xda\xb6\x97\xfa\xfe\x73\x6a\xc6\xde\x7f\xea\x13\x7b\x38\xaa\xbe\x44\x39\xbf\x98\xdd\x1d\xcf\x5a\x4a\x41\xd4\x23\x60\x59\xe9\x50\xf9\xd4\x50\x98\xc8\xbd\xdc\x5d\x90\xd5\xbc\x6d\xa4\xc5\x07\x34\x32\xde\x37\x4d\x3a\xdb\xb1\x9c\x5d\x5c\xad\x87\x73\x92\xbf\x1d\x67\xf2\xe1\x7c\x36\xbf\xbc\xc8\x23\xa3\xdb\x8f\x0f\x57\xb3\xf9\x89\x32\x2e\x51\x7b\xea\x97\x6f\xc3\xba\x2a\xe9\x26\x9e\x7e\x9f\xed\x61\x97\xf1\xeb\x2d\x86\x22\x83\x34\xaa\x75\xca\x36\x74\x13\xed\xe8\x58\x7a\x63\x66\x17\xca\x24\x52\xb9\xef\x41\x75\x99\x39\x4c\x49\x1f\xcc\x50\xe8\x81\x35\x5c\x07\xb7\xc2\x83\x27\xd9\xef\xb3\xe9\x7c\x36\x39\x38\xbf\xc7\x69\x45\x1a\x35\xa3\x41\x74\xdb\x70\xdc\x9b\xdf\x8f\x42\x0e\xc9\x7d\x17\xf2\x68\x2f\xfc\x1b\x00\x00\xff\xff\x96\x85\xdf\x11\xa2\x0e\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/all-in-one-template.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
